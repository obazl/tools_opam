load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")

load(":BUILD.bzl", "CMD_FLAGS", "BOOTSTRAP_INCLUDES", "lemon")

# load(":BUILD.bzl", "lemon") # , "DEBUG_DEFINES")

exports_files([
    "log.c", "log.h", "utarray.h", "uthash.h", "utstring.h"
])

## to enable DEBUG_TRACE, pass --@opam//bzl/debug:trace

## debug flags etc. for lexing/parsing at bottom of file

##########
cc_library(
    name  = "bootstrap",
    alwayslink = True,
    # linkstatic = 1,
    srcs  = [
        "config.c",
        "config.h",
        "driver.c",
        "driver.h",
        "frontend.c",
        "frontend.h",
        "emit_build_bazel.c",
        "emit_build_bazel.h",
        "emit_ocaml_repo.c",
        "emit_ocaml_repo.h",
        "help.c",
        "help.h",
        "meta_entries.c",
        "meta_entries.h",
        "meta_flags.c",
        "meta_flags.h",
        "meta_fs.c",
        "meta_fs.h",
        "meta_packages.c",
        "meta_packages.h",
        "meta_properties.c",
        "meta_properties.h",
        "meta_settings.c",
        "meta_settings.h",
        "meta_values.c",
        "meta_values.h",

        "obazl_config.c",
        "obazl_config.h",

        "opam.c",
        "opam.h",
        "opam_config.c",
        "opam_config.h",
        "opam_config_here.c",
        "opam_config_here.h",
        "opam_config_xdg.c",
        "opam_config_xdg.h",
        "opam_coswitch.c",
        "opam_coswitch.h",
        "opam_deps.c",
        "opam_deps.h",
        "opam_here.c",
        "opam_here.h",
        "opam_import.c",
        "opam_import.h",
        "opam_here_create.c",
        "opam_here_create.h",
        "opam_here_export.c",
        "opam_here_export.h",
        "opam_here_opam_init.c",
        "opam_here_opam_init.h",
        "opam_here_opam_install.c",
        "opam_here_opam_install.h",
        "opam_init_prompts.c",
        "opam_init_prompts.h",
        "opam_init_xdg.c",
        "opam_init_xdg.h",
        "opam_local.c",
        "opam_local.h",
        "opam_local_clean.c",
        "opam_local_clean.h",
        "opam_local_export.c",
        "opam_local_export.h",
        "opam_local_import.c",
        "opam_local_import.h",
        "opam_local_init.c",
        "opam_local_init.h",
        "opam_local_refresh.c",
        "opam_local_refresh.h",
        "opam_status.c",
        "opam_status.h",
        "opam_xdg_list.c",
        "opam_xdg_list.h",
        "opam_xdg_refresh.c",
        "opam_xdg_refresh.h",

        "run_cmd.c",
        "run_cmd.h",

        "spawn_cmd.c",
        "spawn_cmd.h",

        # "xdg_config.c",
        # "xdg_config.h",

        "utils.c",
        "utils.h",

        "log.c",
        "log.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",

        # "s7_config.h",

    ] + select({
        "//bzl/host:linux": ["strlcpy.c", "strlcat.c"],
        "//conditions:default":   []
    }),
    hdrs = [
        "bootstrap.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
    ],
    data  = [
        "//templates:ocaml_bigarray.BUILD",
        "//templates:ocaml_c_api.BUILD",
        "//templates:ocaml_compiler-libs.BUILD",
        "//templates/compiler_libs:bytecomp.BUILD",
        "//templates/compiler_libs:common.BUILD",
        "//templates/compiler_libs:optcomp.BUILD",
        "//templates/compiler_libs:toplevel.BUILD",
        "//templates/compiler_libs:native_toplevel.BUILD",
        "//templates:ocaml_dynlink.BUILD",
        "//templates:ocaml_num.BUILD",
        "//templates:ocaml_ocamldoc.BUILD",
        "//templates:ocaml_runtime.BUILD",
        "//templates:ocaml_stdlib.BUILD",
        "//templates:ocaml_str.BUILD",
        "//templates/toolchain/adapters/local:BUILD.bazel",
        "//templates/toolchain/adapters/linux/x86_64:BUILD.bazel",
        "//templates/toolchain/adapters/linux/arm:BUILD.bazel",
        "//templates/toolchain/adapters/macos/x86_64:BUILD.bazel",
        "//templates/toolchain/adapters/macos/arm:BUILD.bazel",
        "//templates/toolchain/profiles:BUILD.bazel",
        "//templates/toolchain/selectors/local:BUILD.bazel",
        "//templates/toolchain/selectors/linux/x86_64:BUILD.bazel",
        "//templates/toolchain/selectors/linux/arm:BUILD.bazel",
        "//templates/toolchain/selectors/macos/x86_64:BUILD.bazel",
        "//templates/toolchain/selectors/macos/arm:BUILD.bazel",
        "//templates/host/bazel:BUILD.bazel",
        "//templates/host/build:BUILD.bazel",
        "//templates/host/target:BUILD.bazel",
        "//templates:ocaml_threads.BUILD",
        "//templates:ocaml_unix.BUILD",
        "//man/man1:@opam.1",
        "//man/man1:@opam_coswitch.1",
        "//man/man1:@opam_coswitch_list.1",
        "//man/man1:@opam_coswitch_remove.1",
        "//man/man1:@opam_coswitch_set.1",
        "//man/man1:@opam_here.1",
        "//man/man1:@opam_here_clean.1",
        "//man/man1:@opam_here_clone.1",
        "//man/man1:@opam_here_create.1",
        "//man/man1:@opam_here_export.1",
        "//man/man1:@opam_here_expunge.1",
        "//man/man1:@opam_here_import.1",
        "//man/man1:@opam_here_list.1",
        "//man/man1:@opam_here_refresh.1",
        "//man/man1:@opam_here_reinit.1",
        "//man/man1:@opam_here_set.1",
        "//man/man1:@opam_here_opam.1",
        "//man/man1:@opam_here_opam_init.1",
        "//man/man1:@opam_here_opam_install.1",
        "//man/man1:@opam_here_opam_remove.1",
        "//man/man1:@opam_local.1",
        "//man/man1:@opam_local_clean.1",
        "//man/man1:@opam_local_export.1",
        "//man/man1:@opam_local_import.1",
        "//man/man1:@opam_local_init.1",
        "//man/man1:@opam_local_list.1",
        "//man/man1:@opam_local_refresh.1",
        "//man/man1:@opam_local_set.1",
        "//man/man1:@opam_man.1",
        "//man/man1:@opam_shared_refresh.1",
    ],
    defines = select({
        # ":ast-dump-enabled": ["DEBUG_DUMP"],
        ":yydebug-enabled": ["DEBUG_DUMP"],
        "//conditions:default":   []
    }) + select({
        ":ast-trace-enabled": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + select({
        "//bzl/debug/trace": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    copts = CMD_FLAGS + BOOTSTRAP_INCLUDES + [
        "-Iexternal/libinih",
        "-Iexternal/libs7/src",
        "-Iexternal/libs7/src",
    ],
    # copts = [
    #     "-std=c11",
    #     "-pedantic-errors",

    #     "-UDEBUG", # FIXME: macos fastbuild only

        ## NB: we need '-I.' because re2c will this into meta_syntaxis.c:
        ## #include "bazel-out/darwin-fastbuild/bin/external/tools_opam/bootstrap/meta_syntaxis.h"
        # "-I.",
        # "-I$(GENDIR)/.",

        # "-Ibootstrap",
        # "-I$(GENDIR)/bootstrap",

        # "-I$(GENDIR)/opam/bootstrap",

        ## WARNING: importing this repo under any name other than
        ## 'opam' with break this:
        # "-Iexternal/tools_opam/bootstrap",
        # "-I$(GENDIR)/external/tools_opam/bootstrap",

    #     "-Iexternal/libinih",
    # ],
    deps = [
        ":meta_lexis",
        ":meta_syntaxis",
        # ":opam_parser",
        "//external/libinih:inih",
        "@libs7//src:s7",
        # "@libs7//vendored/linenoise",
    ],
    visibility = ["//visibility:public"]
)

###########
cc_library(
    name = "meta_syntaxis",
    srcs = [
        "meta_syntaxis.c",
        "meta_syntaxis.h",
        "log.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
        ] + select({
        ":yydebug-enabled": [
            "meta_entries.c", "meta_entries.h"
        ],
        "//conditions:default":   []
    }),
    defines = select({
        ":yydebug-enabled": ["YYDEBUG", "DEBUG_DUMP"],
        "//conditions:default":   []
    }) + select({
        ":yytrace-enabled": ["YYTRACE"],
        "//conditions:default":   []
    }),
    # alwayslink = True,
    copts = CMD_FLAGS + BOOTSTRAP_INCLUDES + ["-Iexternal/libinih"],
    # copts = [
    #     "-I.",
    #     "-Ibootstrap",
    #     "-Iopam/bootstrap",
    #     "-Iexternal/tools_opam/bootstrap",
    #     "-I$(GENDIR)/external/tools_opam/bootstrap",

    # ],
    # deps = ["opam_lexer"],
    visibility = ["//test:__subpackages__"]
)

########
lemon(
    name = "gen_meta_syntaxis",
    yy   = "meta_syntaxis.y",
    outs = ["meta_syntaxis.c","meta_syntaxis.out"],
    defines = select({
        ":yydebug-enabled": ["YYDEBUG", "DEBUG_DUMP"],
        "//conditions:default":   []
    }) + select({
        ":yytrace-enabled": ["YYTRACE"],
        "//conditions:default":   []
    })
)

###########
cc_library(
    name = "meta_lexis",
    srcs = [
        # "meta_lexer.c", "meta_lexer.h",
        "meta_lexis.c", "meta_lexis.h",
        "log.c", "log.h",
        "utarray.h",
        "uthash.h",
        "utstring.h",
    ],
    # alwayslink = True,
    hdrs = [
        "log.h",
        # "meta_lexer.h"
    ],
    copts = CMD_FLAGS + BOOTSTRAP_INCLUDES,
    # copts = [
    #     "-Ibootstrap",
    #     "-Iopam/bootstrap",
    #     "-I$(GENDIR)/bootstrap",
    #     "-I$(GENDIR)/opam/bootstrap",
    #     "-I$(GENDIR)/external/tools_opam/bootstrap"
    # ],
    visibility = ["//test:__subpackages__"]
)

########
## re2c takes a long time to build. we do not need to run it every
## time once the grammar is stable, so we put the .c file under
## version control. if you need to work on the meta lexer,
## uncomment this genrule, run it, and replace meta_lexis.c
## by the newly generated version.
# genrule(
#     name = "gen_meta_lexis",
#     srcs = [
#         "meta_lexis.re",
#     ],
#     tools = ["@opam_re2c//:re2c"],
#     outs  = [
#         "meta_lexis.c"
#     ],
#     cmd   = "\n".join([
#         "for f in $(locations @opam_re2c//:re2c)",
#         "do",
#         "    if [ -f $$f ]",
#         "    then",
#         "        if [ re2c = `basename $$f` -a -x $$f ]",
#         "        then",
#         "            break",
#         "        fi",
#         "    fi",
#         "done",
#         "$$f --conditions --tags -o $(@D)/meta_lexis.c $(location meta_lexis.re)",
#     ]),
#     visibility = ["//visibility:public"]
# )

################################################################
####    OPAM Parser
################################################################
# cc_library(
#     name = "opam_parser",
#     # name = "opam_syntaxis",
#     srcs = [
#         "opam_parser.c",
#         "opam_parser.h",
#         "opam_syntaxis.c",
#         "opam_syntaxis.h",
#         "log.h",
#         "utarray.h",
#         "uthash.h",
#         "utstring.h",
#         ],
#     hdrs = [
#         "libopamparser.h",
#         # "opam_parser.h"
#     ],
#     copts = CMD_FLAGS + BOOTSTRAP_INCLUDES,
#     defines = select({
#         ":yydebug-enabled": ["YYDEBUG"],
#         "//conditions:default":   []
#     }) + select({
#         ":lexdebug-enabled": ["LEXDEBUG"],
#         "//conditions:default":   []
#     }) + select({
#         ":lexdebug-fvf": ["LEXDEBUG_FVF"],
#         "//conditions:default":   []
#     }),
#     # deps = ["opam_lexer"],
#     visibility = ["//test:__subpackages__"]
# )

# lemon(
#     name = "gen_opam_syntaxis",
#     yy   = "opam_syntaxis.y",
#     outs = ["opam_syntaxis.c","opam_syntaxis.out"],
#     compress = False,
#     defines = select({
#         ":yydebug-enabled": ["YYDEBUG"],
#         "//conditions:default":   []
#     }) + select({
#         ":yydebug-exit-on-error-enabled": ["YYDEBUG_EXIT_ON_ERROR"],
#         "//conditions:default":   []
#     }) + select({
#         ":yydebug-filter": ["YYDEBUG_FILTER"],
#         "//conditions:default":   []
#     }) + select({
#         ":yydebug-fpf": ["YYDEBUG_FPF"],
#         "//conditions:default":   []
#     }) + select({
#         ":lexdebug-fvf": ["YYDEBUG_FVF"],
#         "//conditions:default":   []
#     }) + select({
#         ":yydebug-build-filter": ["YYDEBUG_BUILD_FILTER"],
#         "//conditions:default":   []
#     })
# )

################################################################

# STRLCPY_LOC = select({
#         "//bzl/host:linux": " strlcpy.c) \\",
#         "//conditions:default":   ""
# })

CMD_HDR = "\n".join([
    "SRC1=$(location config.c)",
    "SRCDIR1=`dirname $$SRC1`;",
])

MAC_FILES = " ".join([
    "$(location :makeheaders)",
    "$(location config.c)",
    "$(location driver.c)",
    "$(location frontend.c)",
    "$(location emit_build_bazel.c)",
    "$(location emit_ocaml_repo.c)",
    "$(location help.c)",
    "$(location meta_entries.c)",
    "$(location meta_flags.c)",
    "$(location meta_fs.c)",
    "$(location meta_packages.c)",
    "$(location meta_properties.c)",
    "$(location meta_settings.c)",
    "$(location meta_values.c)",
    "$(location meta_lexis.c)",
    "$(location meta_syntaxis.c)",
    "$(location obazl_config.c)",
    "$(location opam.c)",
    "$(location opam_config.c)",
    "$(location opam_config_here.c)",
    "$(location opam_config_xdg.c)",
    "$(location opam_coswitch.c)",
    "$(location opam_deps.c)",
    "$(location opam_here.c)",
    "$(location opam_import.c)",
    "$(location opam_here_create.c)",
    "$(location opam_here_export.c)",
    "$(location opam_here_opam_init.c)",
    "$(location opam_here_opam_install.c)",
    "$(location opam_init_prompts.c)",
    "$(location opam_init_xdg.c)",
    "$(location opam_local.c)",
    "$(location opam_local_clean.c)",
    "$(location opam_local_export.c)",
    "$(location opam_local_import.c)",
    "$(location opam_local_init.c)",
    "$(location opam_local_refresh.c)",
    "$(location opam_status.c)",
    "$(location opam_xdg_list.c)",
    "$(location opam_xdg_refresh.c)",
    "$(location run_cmd.c)",
    "$(location spawn_cmd.c)",
    "$(location utils.c)",
    "$(location ansi_colors.h)",
])

########
genrule(
    name = "mkhdrs",
    srcs = [
        "config.c",
        "driver.c",
        "frontend.c",
        "emit_build_bazel.c",
        "emit_ocaml_repo.c",
        "help.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_fs.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        "meta_lexis.c",
        "meta_syntaxis.c",
        "obazl_config.c",
        "opam.c",
        "opam_config.c",
        "opam_config_here.c",
        "opam_config_xdg.c",
        "opam_coswitch.c",
        "opam_deps.c",
        "opam_here.c",
        "opam_here_create.c",
        "opam_here_export.c",
        "opam_here_opam_init.c",
        "opam_here_opam_install.c",
        "opam_import.c",
        "opam_init_prompts.c",
        "opam_init_xdg.c",
        "opam_local.c",
        "opam_local_clean.c",
        "opam_local_export.c",
        "opam_local_import.c",
        "opam_local_init.c",
        "opam_local_refresh.c",
        "opam_status.c",
        "opam_xdg_list.c",
        "opam_xdg_refresh.c",
        "run_cmd.c",
        "spawn_cmd.c",
        "utils.c",
        "ansi_colors.h",
    ] + select({
        "//bzl/host:linux": ["strlcpy.c", "strlcat.c"],
        "//conditions:default":   []
    }),
    outs = [
        "config.h",
        "driver.h",
        "frontend.h",
        "emit_build_bazel.h",
        "emit_ocaml_repo.h",
        "help.h",
        "meta_entries.h",
        "meta_flags.h",
        "meta_fs.h",
        "meta_packages.h",
        "meta_properties.h",
        "meta_settings.h",
        "meta_values.h",
        "meta_lexis.h",
        "meta_syntaxis.h",
        "obazl_config.h",
        "opam.h",
        "opam_config.h",
        "opam_config_here.h",
        "opam_config_xdg.h",
        "opam_coswitch.h",
        "opam_deps.h",
        "opam_here.h",
        "opam_import.h",
        "opam_here_create.h",
        "opam_here_export.h",
        "opam_here_opam_init.h",
        "opam_here_opam_install.h",
        "opam_init_prompts.h",
        "opam_init_xdg.h",
        "opam_local.h",
        "opam_local_clean.h",
        "opam_local_export.h",
        "opam_local_import.h",
        "opam_local_init.h",
        "opam_local_refresh.h",
        "opam_status.h",
        "opam_xdg_list.h",
        "opam_xdg_refresh.h",
        "run_cmd.h",
        "spawn_cmd.h",
        "utils.h",
    ],
    cmd = CMD_HDR + MAC_FILES + select({
        "//bzl/host:linux": " $(location strlcpy.c);",
        "//conditions:default": ";"
    }) + "cp $${SRCDIR1}/*.h $(@D)",
    tools = [":makeheaders"],
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "mkhdrs-export",
    srcs = [
        "config.c",
        "driver.c",
        "frontend.c",
        "emit_build_bazel.c",
        "emit_ocaml_repo.c",
        "help.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_fs.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        "meta_lexis.c",
        "meta_syntaxis.c",
        "obazl_config.c",
        "opam.c",
        "opam_config.c",
        "opam_config_here.c",
        "opam_config_xdg.c",
        "opam_coswitch.c",
        "opam_deps.c",
        "opam_here.c",
        "opam_import.c",
        "opam_here_create.c",
        "opam_here_export.c",
        "opam_here_opam_init.c",
        "opam_here_opam_install.c",
        "opam_init_prompts.c",
        "opam_init_xdg.c",
        # "opam_lexer.c",
        "opam_local.c",
        "opam_local_clean.c",
        "opam_local_export.c",
        "opam_local_import.c",
        "opam_local_init.c",
        "opam_local_refresh.c",
        # "opam_parser.c",
        "opam_status.c",
        "opam_xdg_list.c",
        "opam_xdg_refresh.c",
        "run_cmd.c",
        "spawn_cmd.c",
        "utils.c",
        "ansi_colors.h"
    ],
    outs = [
        "bootstrap.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location opam.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location :makeheaders) -H \\",
        "    $(location config.c) \\",
        "    $(location driver.c) \\",
        "    $(location frontend.c) \\",
        "    $(location emit_build_bazel.c) \\",
        "    $(location emit_ocaml_repo.c) \\",
        "    $(location help.c) \\",
        "    $(location meta_entries.c) \\",
        "    $(location meta_flags.c) \\",
        "    $(location meta_fs.c) \\",
        "    $(location meta_packages.c) \\",
        "    $(location meta_properties.c) \\",
        "    $(location meta_settings.c) \\",
        "    $(location meta_values.c) \\",
        "    $(location meta_lexis.c) \\",
        "    $(location meta_syntaxis.c) \\",
        "    $(location obazl_config.c) \\",
        "    $(location opam.c) \\",
        "    $(location opam_config.c) \\",
        "    $(location opam_config_here.c) \\",
        "    $(location opam_config_xdg.c) \\",
        "    $(location opam_coswitch.c) \\",
        "    $(location opam_deps.c) \\",
        "    $(location opam_here.c) \\",
        "    $(location opam_import.c) \\",
        "    $(location opam_here_create.c) \\",
        "    $(location opam_here_export.c) \\",
        "    $(location opam_here_opam_init.c) \\",
        "    $(location opam_here_opam_install.c) \\",
        "    $(location opam_init_prompts.c) \\",
        "    $(location opam_init_xdg.c) \\",
        # "    $(location opam_lexer.c) \\",
        "    $(location opam_local.c) \\",
        "    $(location opam_local_clean.c) \\",
        "    $(location opam_local_export.c) \\",
        "    $(location opam_local_import.c) \\",
        "    $(location opam_local_init.c) \\",
        "    $(location opam_local_refresh.c) \\",
        # "    $(location opam_parser.c) \\",
        "    $(location opam_status.c) \\",
        "    $(location opam_xdg_list.c) \\",
        "    $(location opam_xdg_refresh.c) \\",
        "    $(location run_cmd.c) \\",
        "    $(location spawn_cmd.c) \\",
        "    $(location utils.c) \\",
        "    $(location ansi_colors.h) \\",
        "> $@"
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:public"]
)

################################################################
#### TOOLS

cc_binary(
    name  = "lemon",
    srcs  = ["lemon.c"],
)

cc_binary(
    name  = "makeheaders",
    srcs  = ["makeheaders.c"],
    copts = ["-O3"],
    linkstatic=1,
    visibility = [
        "//ingest:__pkg__",
        "//init:__pkg__",
        "//install:__pkg__",
        "//status:__pkg__",
        "//test:__subpackages__",
        "//update:__pkg__"
    ]
)

################################################################
## enable meta ast debugging: --//bootstrap:ast-dump
bool_flag(name = "ast-dump", build_setting_default = 0)
config_setting(name = "ast-dump-enabled",
               flag_values = {":ast-dump": "True"})
config_setting(name = "ast-dump-disabled",
               flag_values = {":ast-dump": "False"})

## enable meta ast debugging: --//bootstrap:ast-trace
bool_flag(name = "ast-trace", build_setting_default = 0)
config_setting(name = "ast-trace-enabled",
               flag_values = {":ast-trace": "True"})
config_setting(name = "ast-trace-disabled",
               flag_values = {":ast-trace": "False"})

## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug-enabled", flag_values = {":yydebug": "True"})
config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace-enabled", flag_values = {":yytrace": "True"})
config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})
config_setting(name = "yydebug-build-filter",
               flag_values = {":yydebug-rules": "build-filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})
config_setting(name = "lexdebug-build-filter",
               flag_values = {":lexdebug-rules": "build-filter"})

